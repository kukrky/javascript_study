/*
호이스팅은 왜 발생할까?
 => 변수나 함수 들을 위로 끌어 올려서 실행 시켜주는 듯이 보이는 현상.

javascript의 실행과정
1.파일을 만들었음. hoisting.js
2. 코드를 짠 다음에 node hoisting.js 통해서 코드를 실행하고자 했음.


3. javascript 엔진이 먼저, 명령문들을 실행하기 전에 변수를 선언한다.
4. 선언 => 초기화 => 값 할당
 - 근데 var은 선언과 초기화를 동시에 함. => 초기화를 undefined
 - let은 선언밖에 안함. let은 엔진이 돌아가면서 명령문을 실행시킬때 변수를 선언한 줄을 만나야 초기화 + 값 할당을 동시에 함.

5. javascript 엔진에 선언을 다 시키고 나면 이제야 위에서 아래로 명령문들을 실행한다.


var은 호이스팅 인정, let은 호이스팅이 된다고 말할 수 있을까?
 => let도 호이스팅이 된다.
 TDZ(임시적인 위험 지역)때문에 가능한 것임.
 변수를 만나기 전까지 줄이 TDZ임. 그래서 TDZ 내에서 이 변수를 호출하려 하면 오류를 발생시킨다.

 var
 |
 |
 |
 엔진 : 선언, 초기화
 |엔진끝
 |
 명령문 시작
 |
 |console.log(a) => tdz없제? 그냥 엔진에서 했으니까 쓴다?
 |var a = 10;
 |


 |
 |
 |
 엔진 : 선언----------------------|
 |엔진끝                          |
 |                               |
 명령문 시작                      |
 |                               |   tdz => 나 b 만나기 전까지는 안 물러줘!
 |console.log(b)                 |
 |let b = 10; -------------------|
 |


 
*/

console.log(a); //undefined
console.log(b); // 선언밖에 안된 상태에서 let을 출력하려 하면 당연히 오류가 남.
var a = 10; // 이 줄을 만나면 a = 10 넣어줌.
let b = 10; // 선언밖에 안함.
const c = 10; //const도 똑같음.